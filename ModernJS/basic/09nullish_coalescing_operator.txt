nullish 병합 연산자 "??"

nullish 병합 연산자(nullish coalescing operator) ?? 를 사용하면 짧은 문법으로 여러 피연산자 중 그 값이 '확정되어있는'변수를 찾을 수 있다.

a ?? b 의 평가 결과
- a가 null도 아니고  undefined도 아니면 a
- 그 외의 경우는 b

nullish 병합 연산자 ??없이 x = a??b와 동일한 동작을 하는 코드를 작성하면

x = (a !== null && a !== undefined) ? a : b;

다른 예시로 세 변수 중 실제 값이 있는 변수의 값을 출력하는데, 세 변수 모두 값이 없다면 '익명의 사용자'가 출력되도록
이대, nullish 병합 연산자 ??를 사용하면 값이 정해진 변수를 간편하게 찾을 수 있다.

let firstName = null;
let lastName = null;
let nickName = "바이올렛";

// null이나 undefined가 아닌 첫 번째 피연산자
alert(firstName ?? lastName ?? nickName ?? "익명의 사용자"); // 바이올렛


- - -


'??'와 '||'의 차이

nullish 병합 연산자 OR 연산자 ||와 매우 유사해 보인다. 실제로 위 예시에서 ??를 ||로 바궈도 그 결과는 동일하기까지 함
하지만 중요한 차이점이 있는데

- ||는 첫번째 truthy값을 반환
- ??는 첫번째 정의된(defined)값을 반환

null과 undefined, 숫자 0을 구분지어 다뤄야 할 때 이 차이점은 매우 중요한 역할을 한다.

height = height ?? 100;

height에 값이 정의되지 않은경우 height엔 100이 할당
??와 ||을 비교해보자

let height = 0;

alert(height || 100); // 100
alert(height ?? 100); // 0

height || 100 은 height 에 0을 할당했지만 0을 falsy 한 값으로 취급했기 때문에 null이나 undeifned를 할당한 것과 동일하게 처리한다. 따라서 height || 100의 평가 결과는 100이다
반면 height ?? 100 의 평가 결과는 height 가 정확하게 null이나 undefined일 경우에만 100이 된다. 
예시에선 height에 0이라는 값을 할당했기 때문에 얼럿창엔 0이 출력
이런 특징 때문에 높이처럼 0이 할당될 수 있는 변수를 사용해 기능을 개발할 땐 ||보단 ??가 적합



- - -



연산자 우선순위

??의 연산자 우선위 5로 꽤 낮다.
따라서 ??는 =와 ?보다는 먼저, 대부분의 연산자보다는 나중에 평가
그렇기 때문에 복잡한 표현식 안에서 ??를 사용해 값을 하나 선택할 땐 괄호를 추가하는게 좋다.

let height = null;
let width = null;

// 괄호를 추가!
let area = (height ?? 100) * (width ?? 50);

alert(area); // 5000

그렇지 않으면 *가 ??보다 우선순위가 높기 때문에 *가 먼저 실행

// 원치 않는 결과
let area = height ?? (100 * width) ?? 50;

??엔 자바스크립트 언어에서 규정한 또 다른 제약사항이 있다.
안정성 관련 이슈 때문에 ??는 &&나 ||와 함께 사용하지 못한다.

let x = 1 && 2 ?? 3; // SyntaxError: Unexpected token '??'

||를 ??로 바꾸기 시작하면서 만드는 실수를 방지하고자 명세서에 제약이 추가된 상황. 제약을 피하려면 괄호를 사용하자

let x = (1 && 2) ?? 3; // 제대로 동작합니다.

alert(x); // 2