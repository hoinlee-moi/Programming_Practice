# 자료형
자바 스크립트에서 값은 항상 문자열이나 숫자형 같은 특정한 자료형에 속한다.
자바 스크립트에는 여덟 가지 기본 자료형이 있음
 

## 숫자형
let n = 123;
n = 12.345;


숫자형은 정수 및 부동소수점 숫자를 나타냄
숫자형과 관련된 연산은 다양한데 , 대표적으로 곱셈 * , 나눗셈 / . 덧셈 + , 뺄셈 - 등이 있다
숫자형엔 일반적인 숫자 외에 Infinity, -Infinity, NaN 같은 '특수 숫자 값(special numeric value) 이 포함


Infinity는 어떤 숫자보다 더 큰 특수 값, 무한대를 나타냄 -> 어느 숫자든 0으로 나누면 무한대를 얻을 수 있다.

alert(1 / 0); //무한대
alert( Infinity ); // 무한대 - 직접 참조도 가능

NaN은 계산 중에 에러가 발생했다는 것을 나타내주는 값. 부정확하거나 정의되지 않은 수학 연산을 사용하면 계산 중 에러가 발생하는데 이때 NaN이 반환

alert( "숫자가 아님" / 2 ); // NaN, 문자열을 숫자로 나누면 오류가 발생
alert( "숫자가 아님" / 2 + 5 ); // NaN , NaN에 어떤 추가 연산을 해도 결국 NaN이 반환된다.
즉 연산 과정 어딘가에서 NaN이 반환 되었다면, 이는 모든 결과에 영향을 미친다.



## BigInt

내부 표현 방식 때문에 자바스크립트에선 (2**53 -1) (9007199254740991)보다 큰 값 혹은 -(2**53 -1) 보다 작은 정수는'숫자형'을 사용해 나타낼 수 없다.
대부분은 이런 제약사항이 문제되지 않지만 암호관련 작업같이 아주 큰 숫자가 필요한 상황이거나 아주 높은 정밀도로 작업을 해야 할 때는 이런 큰 숫자가 필요
BigInt 형은 표준으로 채택된 지 오래되지 않은 자료형으로, 길이에 상관없이 정수를 나타낼 수 있다.


BigInt형 값은 정수 리터럴 끝에 n을 붙이면 만들 수 있음

 끝에 'n'이 붙으면 BigInt형 자료입니다.
const bigInt = 1234567890123456789012345678901234567890n;


## 문자형
자바스크립트에선 문자열(string)을 따옴표를 묶는다.
let str = "Hello";
let str2 = 'Single quotes are ok too';
let phrase = `can embed another ${str}`;

따옴표는 세 종류가 있다.

1.큰따옴표: "Hello"
2.작은따옴표: 'Hello'
3.역 따옴표(백틱, backtick): `Hello`

큰 따옴표와 작은 따옴표는 '기본적인'따옴표로, JS에선 차이를 두지 않지만 역 따옴표로 변수나 표현식을 깜싼후 ${...} 안에 넣어주면
원하는 변수나 표현식을 문자열 중간에 손쉽게 넣을 수 있다.

let name = "John";

// 변수를 문자열 중간에 삽입
alert( `Hello, ${name}!` ); // Hello, John!

// 표현식을 문자열 중간에 삽입
alert( `the result is ${1 + 2}` ); // the result is 3

//'기본적인'따옴표는 확장 기능을 지원하지 않음

alert( "the result is ${1 + 2}" ); // the result is ${1 + 2} 


## 불린형
불린형(논리타입)은 true 와 false 두 가지 값밖에 없는 자료형
보통 긍정(yes)나 부정(no)를 나타내는 값을 저장할 때 사용.

let nameFieldChecked = true; // 네, name field가 확인되었습니다(checked).
let ageFieldChecked = false; // 아니요, age field를 확인하지 않았습니다(not checked)

불린값은 비교 결과를 저장할 때도 사용

let isGreater = 4 > 1;

alert( isGreater ); // true (비교 결과: "yes")


## null값
null값은 어느 자료형에도 속하지 않는 값으로 null값은 오로지 null값만 포함하는 별도의 자료형을 만든다.

let age = null;

다른 언어에선 null을 존재하지 않는 객체에 대한 참조나 널 포인터(null pointer)를 나타낼 때 사용하는데
자바스크립트에선 null을 존재하지 않는(nothing) 값 , 비어있는(empty)값, 알 수 없는(unknown)값을 나타내는 데 사용

let age = null;은 나이(age)를 알 수 없거나 그 값이 비어있음을 보여준다.


## ‘undefined’ 값
undefined 값도 null 값 처럼 자신만의 자료형을 형성
undefined 는 '값이 할당되지 않은 상태'를 나타낼 때 사용한다.
변수는 선언했지만, 값을 할당하지 않았다면 해당 변수에 undefined가 자동으로 할당된다.

let age;

alert(age); // 'undefined'가 출력됩니다.

개발자가 직접 변수에 명시적으로 할당하는 것도 가능하긴 하지만 권장하진 않음.
변수가 비어있거나 알 수 없는 상태라는 걸 나타내려면 null을 사용하자.
undefined는 값이 할당되지 않은 변수의 초기값을 위해 예약어로 남겨두자.


## 객체와 심볼
객체(object) 형은 특수한 자료형
객체형을 제외한 다른 자료형은 문자열이든 숫자든 한 가지만 표현할 수 있기 때문에 원시(primitive) 자료형이라 부른다.
반면 객체는 데이터 컬렉션이나 복잡한 개체(entity)를 표현할 수 있음

심볼(symbol)형은 객체의 고유한 식별자(unique identifier)를 만들 때 사용.



## typeof 연산자
typeof 연산자는 인수의 자료형을 반환합니다. 자료형에 따라 처리 방식을 다르게 하고 싶거나 변수의 자료형을 빠르게 알아내고자 할 때 유용함
typeof 연산자는 두 가지 형태의 문법을 지원하는데

1. 연산자: typeof x
2. 함수: typeof(x)

괄호가 있든 없든 결과는 동일하다.
typeof x 를 호출하면 인수의 자료형을 나타내는 문자열을 반환한다.


typeof undefined // "undefined"

typeof 0 // "number"

typeof 10n // "bigint"

typeof true // "boolean"

typeof "foo" // "string"

typeof Symbol("id") // "symbol"

typeof Math // "object"  (1)

typeof null // "object"  (2)

typeof alert // "function"  (3)

마지막 3개에 대해서는

1. Math 는 수학연산을 제공하는 내장 객체로 "object"가 출력. 내장 객체는 객체형이라는 것을 알려준다.

2. typeof null의 결과는 "object"로 null은 별도의 고유한 자료형을 가지는 특수 값으로 객체가 아니지만, 하위 호환성을 유지하기 위해
이런 오류를 수정하지 않고 남겨둔 상황. 언어자체의 오류이므로 null이 객체가 아님을 유의할 것!!

3. typeof 는 피연산자가 함수면 "function"을 반환한다. 그러므로 typeof alert은 "function"을 출력
하지만 '함수'형은 따로 없다. 함수는 객체형에 속하는데 이런 동작 방식이 형식적으론 잘못 되었지만 오래전 만들어진 규칙이기 때문에
하위 호환성 유지를 위해 남겨진 상태.