함수!

함수는 프로그램을 구성하는 주요 '구성 요소(building block)' 함수를 이용하면 중복 없이 유사한 동작을 하는 코드를 여러 번 호출할 수 있다.
앞 내용들의 다양한 예시에서 alert(message), prompt(message, default), confirm(question)과 같은 내장 함수를 사용할 수 있었다.


01. 함수 선언

한수 선언(function declaration) 방식을 이용하면 함수를 만들 수 있다.(한수 선언 방식은 함수 선언문이라고 부르기도 함)

function showMessage() {
  alert( '안녕하세요!' );
}

function 키워드, 함수 이름, 괄호로 둘러싼 매개 변수를 차례로 써주면 함수를 선언할 수 있다.
위 함수에는 매개변수가 없는데, 만약 매개변수가 여러 개 있다면 각 매개변수를 콤마로 구분해주자. 이어서 함수를 구성하는 코드의 모인인 '함수 본문(body)'을 중괄호로 감싸 붙여주자.

function name(parameter1, parameter2, ... parameterN) {
  // 함수 본문
}

새롭게 정의한 함수는 함수 이름 옆에 괄호를 붙여 호출할 수 있다. showMessage() 

function showMessage() {
  alert( '안녕하세요!' );
}

showMessage();
showMessage();

showMessage()로 함수를 호출하면 함수 본문이 실행되는데 위 예시에선 showMessage를 두번 호출했으므로 얼럿 창이 두 번뜬다.
☆함수의 주요 용도 중 하나는 중복 코드 피하기


- - -


02. 지역 변수

함수 내에서 선언한 변수인 지역 변수(local variable)는 함수 안에서만 접근 할 수 있다.

function showMessage() {
  let message = "안녕하세요!"; // 지역 변수

  alert( message );
}

showMessage(); // 안녕하세요!

alert( message ); // ReferenceError: message is not defined (message는 함수 내 지역 변수이기 때문에 에러가 발생합니다.)


- - -

03. 외부 변수

함수 내부에서 함수 외부의 변수인 외부 변수(outer variable)에 접근할 수 있다.

let userName = 'John';

function showMessage() {
  let message = 'Hello, ' + userName;
  alert(message);
}

showMessage(); // Hello, John

수정도 가능하다.

let userName = 'John';

function showMessage() {
  userName = "Bob"; // (1) 외부 변수를 수정함

  let message = 'Hello, ' + userName;
  alert(message);
}

alert( userName ); // 함수 호출 전이므로 John 이 출력됨

showMessage();

alert( userName ); // 함수에 의해 Bob 으로 값이 바뀜

외부 변수는 지역 변수가 없는 경우에만 사용할 수 있다.
함수 내부에 외부 변수와 동일한 이름을 가진 변수가 선언되었다면, 내부 변수는 외부 변수를 가린다. 
함수 내부에 외부 변수와 동일한 이름을 가진 지역 변수 userName가 선언되어 있는데 외부 변수는 내부 변수에 가려져 값이 수정되지 않음

let userName = 'John';

function showMessage() {
  let userName = "Bob"; // 같은 이름을 가진 지역 변수를 선언합니다.

  let message = 'Hello, ' + userName; // Bob
  alert(message);
}

// 함수는 내부 변수인 userName만 사용합니다,
showMessage();

alert( userName ); // 함수는 외부 변수에 접근하지 않습니다. 따라서 값이 변경되지 않고, John이 출력됩니다.

※ 전역 변수
위 예시의 userName처럼, 함수 외부에 선언된 변수는 전역 변수(global variable)라고 부른다.
전역 변수는 같은 이름을 가진 지역 변수에 의해 가려지지만 않는다면 모든 함수에서 접근할 수 있음
변수는 연관되는 함수 내에 선언하고, 전역 변수는 되도록 사용하지 않는 것이 좋다. 비교적 근래에 작성된 코드들은 대부분 전역변수를 사용하지 않거나
최소한으로만 사용한다.
다만 프로젝트 전반에서 사용되는 데이터는 전역 변수에 저장하는 것이 유용한 경우도 있으니 상황에 따라 사용



- - - 

04. 매개변수가

매개변수(parameter)를 이용하면 임의의 데이터를 함수 안에 전달할 수 있다. 매개변수는 인자(parameter)라고 불리기도 함
아래 예시에서 함수 showMessage는 매개변수 from과 text를 가진다.

function showMessage(from, text) { // 인자: from, text
  alert(from + ': ' + text);
}

showMessage('Ann', 'Hello!'); // Ann: Hello! (*)
showMessage('Ann', "What's up?"); // Ann: What's up? (**)


(*) , (**)로 표시한 줄에서 함수를 호출하면, 함수에 전달된 인자는 지역 변수 from과 text에 복사, 그 후 함수는 지역변수에 복사된 값을 사용한다.


function showMessage(from, text) {

  from = '*' + from + '*'; // "from"을 좀 더 멋지게 꾸며줍니다.

  alert( from + ': ' + text );
}

let from = "Ann";

showMessage(from, "Hello"); // *Ann*: Hello

// 함수는 복사된 값을 사용하기 때문에 바깥의 "from"은 값이 변경되지 않습니다.
alert( from ); // Ann

함수가 from을 변경하지만, 변경 사항은 외부 변수 from에 반영되지 않았다. 함수는 언제나 복사된 값을 사용하기 때문!!


함수의 매개 변수에 전달된 값을 *인수(argument)*라고 부르기도 한다.

- 매개변수는 함수 선언 방식 괄호 사이에 있는 변수 (선언 시 쓰이는 용어)
- 인수는 함수를 호출할 때 매개변수에 전달되는 값(호출 시 쓰이는 용어)

즉, 함수 선언 시 매개변수를 나열하게 되고, 함수를 호출할 땐 인수를 전달해 호출한다.
위 예에서 함수 showMessage는 from과 text라는 두 매개변수를 사용해 선언되었고, 그 후 호출시엔 from,Hello 라는 두 인수를 사용해 호출되었다.


- - -

05. 기본 값

함수 호출 시 매개변수에 인수를 전달하지 않으면 그 값은 undefined가 된다.
예시를 통해 보자면 위에서 정의한 함수 showMessage(from, text)는 매개변수가 2개지만, 아래와 같이 인수를 하나만 넣어서 호출할 수 있다.

showMessage("Ann");

이렇게 코드를 작성해도 에러가 발생하지 않음. 두 번째 매개변수에 값을 전달하지 않았기 때문에 text엔 undefined가 할당될 뿐이다. 따라서 에러없이 "Ann : undefined"가 출력됨
매개변수에 값을 전달하지 않아도 그 값이 undefined가 되지 않게 하려면 함수를 선언할 때 =를 사용해 '기본 값(default value)'을 설정해 주면 된다.

function showMessage(from, text = "no text given") {
  alert( from + ": " + text );
}

showMessage("Ann"); // Ann: no text given

이제는 text가 값을 전달받지 못해도 undefined 대신 기본값 "no text given"이 할당됨
매개변수에 값을 전달해도 그 값이 undefined와 엄격히 일치한다면 기본값이 할당

showMessage("Ann", undefined); // Ann: no text given

복잡한 표현식도 기본값으로 설정할 수 있다.

※매개변수 기본값 평가 시점
자바스크립트에선 함수를 호출할 때마다 매개변수 기본값을 평가한다. 물론 해당하는 매개변수가 없을때만 기본값을 평가
위 예시에선 매개변수 text에 값이 전달되는 경우 anotherFunction()은 호출되지 않는다.
반면 text에 값이 없는 경우 showMessage()를 호출할 때마다 anotherFunction()이 호출된다.


- - -

06. 반환 값

함수를 호출했을 때 함수를 호출한 그곳에 특정 값을 반환하게 할 수 있다.
이 때 이 특정 값을 반환 값(return value)이라고 부름

function sum(a, b) {
  return a + b;
}

let result = sum(1, 2);
alert( result ); // 3

지시자 return은 함수 내 어디서든 사용할 수 있다.
실행 흐름이 지시자 return을 만나면 함수 실행은 즉시 중단되고 함수를 호출한 곳에 값을 반환한다.
위 예시에선 반환 값을 result에 할당
함수 하나에 여러개의 return문이 올수도 있다.

function checkAge(age) {
  if (age >= 18) {
    return true;
  } else {
    return confirm('보호자의 동의를 받으셨나요?');
  }
}

let age = prompt('나이를 알려주세요', 18);

if ( checkAge(age) ) {
  alert( '접속 허용' );
} else {
  alert( '접속 차단' );
}


지시자 return만 명시하는 것도 가능하다. 이런경우 함수가 즉시 종료됨

function showMovie(age) {
  if ( !checkAge(age) ) {
    return;
  }

  alert( "영화 상영" ); // (*)
  // ...
}

checkAge(age)가 false를 반환하면, (*)로 표시한 줄은 실행이 안 되기 때문에 함수 showMovie는 얼럿 창을 보여주지 않는다


※ return문이 없거나 return지시자만 있는 함수는 undefined를 반환한다.
return문이 없는 함수도 무언가를 반환하는데 undefined를 반환

function doNothing() { /* empty */ }

alert( doNothing() === undefined ); // true

return지시자만 있는 경우도 undefined를 반환한다.
return은 return undefined와 동일하게 동작

function doNothing() {
  return;
}

alert( doNothing() === undefined ); // true

※return과 값 사이에 절대 줄을 삽입 X
반환하려는 값이 긴 표현식인 경우, 아래와 같이 지시자 return과 반환하려는 값 사이에 새 줄을 넣어 코드를 작성하고 싶을 수 있다.

return
(some + long + expression + or + whatever * f(a) + f(b))

자바스크립트는 return문 끝에 세미콜론을 자동으로 넣기 때문에 이렇게 return문을 작성해서도 안된다.

return;
(some + long + expression + or + whatever * f(a) + f(b))

따라서 반환하고자 했던 표현식을 반환하지 못하고 아무것도 반환하지 않는 것처럼 되어버림
표현식을 여러 줄에 걸쳐 작성하고 싶다면 표현식이 return 지시자가 있는 줄에서 시작하도록 작성해야한다.
또는 아래와 같이 여는 괄호를 return 지시자와 같은 줄에 써저도 괜찮다.

return (
 some + long + expression
 + or +
 whatever * f(a) + f(b)
 )


- - -


07. 함수 이름짓기

함수는 어떤 동작을 수행하기 위한 코드를 모아놓은 것. 따라서 함수의 이름을 대개 동사임.
함수 이름은 가능한 한 간결하고 명확해야함.
코드를 읽는 사람은 함수 이름만 보고도 함수가 어떤 기능을 하는지 힌트를 얻을 수 있어야 한다.

함수가 어떤 동작을 하는지 축약해서 설명해 주는 동사를 접두어로 붙여 함수 이름을 만드는 게 관습이다.
다만 , 팀 내에서 그 뜻이 반드시 합의된 접두어만 사용

"show"로 시작하는 함수는 대개 무언가를 보여주는 함수
이 외에 아래와 같은 접두어를 사용할 수 있다.

- "get..." - 값을 반환함
- "calc..." - 무언가를 계산함
- "create..." - 무언가를 생성함
- "check..." - 무언가를 확인하고 불린값을 반환함


showMessage(..)     // 메시지를 보여줌
getAge(..)          // 나이를 나타내는 값을 얻고 그 값을 반환함
calcSum(..)         // 합계를 계산하고 그 결과를 반환함
createForm(..)      // form을 생성하고 만들어진 form을 반환함
checkPermission(..) // 승인 여부를 확인하고 true나 false를 반환함


※ 힘수는 동작 하나만 담당해야 한다.
함수는 함수 이름에 언급되어 있는 동작을 정확히 수행해야 하며 그 이외의 동작은 수행해선 안된다.
독립적인 두 개의 동작은 독립된 함수 두 개에서 나눠서 수행할 수 있게 해야함.
한 장소에서 두 동작을 동시에 필요로 하는 경우라도 말이다.

빈번히 하는 실수

- getAge 함수는 나이를 얻어오는 동작만 수행해야 함.
alert창에 나이를 출력해주는 동작은 이 함수에 들어가지 않는 것이 좋다.

- createForm 함수는 form을 만들고 이를 반환하는 동작만 해야한다.
form을 문서에 추가하는 동작이 해당 함수에 들어가 있으면 좋지 않음

- checkPermission 함수는 승인 여부를 확인하고 그 결과를 반환하는 동작만 해야한다.
승인 여부를 보여주는 메시지를 띄우는 동작이 들어가 있으면 좋지 않음


위 예시들은 접두어의 의미가 합의 되었다고 가정하고 만들어졌다.
접두어를 사용하여 함수 이름을 지을 땐, 해당 접두어에 어떤 의미가 있는지 잘 이해하고 있어야 한다.
해당 접두어가 붙은 함수가 어떤 동작을 하는지, 어떤 동작은 하지 못하는지 알고 있어야 함.
접두어를 붙여 만든 모든 함수는 팀에서 만든 규칙을 반드시 따라야 함.
팀원들은 이 규칙을 충분히 이해하고 있어야 하며, 팀원들 사이에 이 규칙이 잘 공유되어야 함!


※아주 짧은 이름
정말 빈번히 쓰이는 함수 중에 이름이 아주 짧은 함수가 있다.

jQuery 프레임워크에서 쓰이는 함수 $와 Lodash 라이브러리의 핵심 함수 _ 등
이 함수들은 지금까지 소개한 함수 이름짓기에 관련된 규칙을 지키지 않고 있다.
예외에 속하는데 함수 이름은 간결하고 함수가 어떤 일을 하는지 설명할 수 있게 지어야 함


- - -

08. 함수 == 주석

함수는 간결하고, 한가지 기능만 수행할 수 있게 만들어야 함. 함수가 길어지면 함수를 잘게 쪼갤 때가 되었다는 신호로 받아들여야한다.
함수를 분리해 작성하면 많은 장점이 있기 때문에 함수가 길어질 경우엔 함수를 분리해 작성할 것을 권유

함수를 간결하게 만들면 테스트와 디버깅이 쉬워지며 함수 그 자체로 주석의 역할까지 한다.

같은 동작을 하는 함수, showPrimes(n)를 두 개 만들어 비교해보면,
showPrimes(n)은 n까지의 소수(prime numbers)를 출력해준다.

function showPrimes(n) {
  nextPrime: for (let i = 2; i < n; i++) {

    for (let j = 2; j < i; j++) {
      if (i % j == 0) continue nextPrime;
    }

    alert( i ); // 소수
  }
}

두 번째 showPrimes(n)는 소수인지 아닌지 여부를 검증하는 코드를 따로 분리해 isPrime(n)이라는 함수에 넣어서 작성

function showPrimes(n) {

  for (let i = 2; i < n; i++) {
    if (!isPrime(i)) continue;

    alert(i);  // a prime
  }
}

function isPrime(n) {
  for (let i = 2; i < n; i++) {
    if ( n % i == 0) return false;
  }
  return true;
}

두 번째 showPrime(n)가 더 이해하기 쉬어보이는데 isPrime 함수 이름을 보고
해당 함수가 소수 여부를 검증하는 동작을 한다는 걸 쉽게 알 수 있다
이렇게 이름만 보고도 어떤 동작을 하는지 알 수 있는 코드를 자기 설명적(self-describing)코드라고 부름

위와 같이 함수는 중복을 없애려는 용도 외에도 사용할 수 있는데 이렇게 함수를 활용하면 코드가 정돈되고 가독성이 높아진다.

