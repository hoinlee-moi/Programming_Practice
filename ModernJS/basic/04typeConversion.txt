
함수와 연산자에 전달되는 값은 대부분 적절한 자료형으로 자동 변환된다. 이런과정을 형 변환(type conversion)이라고 한다.
이번 파일은 원시형의 형 변환에 대해서만
 

문자형으로 변환
String(value)

let value = true;
alert(typeof value); // boolean

value = String(value); //변수 value엔 문자열 "true"가 저장
alert(typeof value); // string

false는 문자열 "false"로 null은 문자열 "null"로 변형되는 것처럼 문자형의 변환은 대부분 예측 가능한 방식으로 일어남



숫자형으로 변환 - 수학과 관련된 함수와 표현식에서 자동으로 일어남(이후 typescript에선 다르니 꼭 주의)
Number(value)

alert("6" / "2"); // 3 - 자동변환 후 연산이 실행

let str = "123";
alert(typeof str); // string

let num = Number(str); // 문자열 "123"이 숫자 123으로 변환

alert(typeof num); // number

숫자형 값을 사용해 무언가를 하려 할 때 그 값을 문자 기반 폼(form)을 통해 입력받는 경우, 명시적 형 변환이 필수!

let age = Number("임의의 문자열 123");

alert(age); //NaN, 형 변환이 실패한다. -> 숫자 이외의 글자가 들어있어서

형 변환 규칙
undefined -> NaN
null -> 0
true and false -> 1과 0
string -> 문자열의 처음과 끝 공백이 제거, 남아잇는 문자열이 없다면 0, 그렇지 않다면 문자열에서 숫자를 읽음. 변환 실패시 NaN


 alert( Number("   123   ") ); // 123
 alert( Number("123z") );      // NaN ("z"를 숫자로 변환하는 데 실패함)
 alert( Number(true) );        // 1
 alert( Number(false) );       // 0



불린형으로 변환
Boolean(value)
규칙
숫자 0, 빈 문자열, null, undefined, NaN과 같이 직관적으로도 "비어있다고" 느껴지는 값들은 false가 됨
그 외의 값은 true로 변환


 alert( Boolean(1) ); // 숫자 1(true)
 alert( Boolean(0) ); // 숫자 0(false)
 
 alert( Boolean("hello") ); // 문자열(true)
 alert( Boolean("") ); // 빈 문자열(false)